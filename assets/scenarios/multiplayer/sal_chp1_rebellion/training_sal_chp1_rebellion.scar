-- Copyright 2022 SEGA Corporation, Developed by Relic Entertainment
import("training.scar")
import("cardinal.scar")

-- ///// Lumber Pan Training /////////////////////////////////////////////////////////
function Goals_PanCameraLumber()
	
	local goal_sequence_pan_camera_lumber_id = "goal_sequence_pan_camera"
	
	local goal_pan_camera_lumber = Training_Goal(
	    Marker_GetPosition(mkr_lumber_camp_obj_1a),
		{
			ID = "goal_pan_camera_lumber",
			Message = "$999453", --Move the camera over the Lumber Camp using the LS
			DataTemplate = "GenericTrainingDataTemplate",
		},
	    PanCameraLumber_CompletePredicate
	)
	
	local goal_sequence_pan_camera_lumber = Training_GoalSequence(
		goal_sequence_pan_camera_lumber_id,
		-1,
		1,
		PanCameraLumber_Trigger,
		PanCameraLumber_IgnorePredicate,
		nil,
		nil,
		false,
		{goal_pan_camera_lumber}
	)

	Training_AddGoalSequence(goal_sequence_pan_camera_lumber)

	Training_EnableGoalSequenceByID(goal_sequence_pan_camera_lumber_id, true)
	
end

function PanCameraLumber_CompletePredicate(goal)
	
	return false
end

function PanCameraLumber_Trigger(goalSequence)

	return true
end

function PanCameraLumber_IgnorePredicate(goalSequence)
	
	if (Objective_IsComplete(SOBJ_MoveCameraToLumber))then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
	return false
end

-- ///// Rock Pan Training /////////////////////////////////////////////////////////
function Goals_PanCameraRock()
	
	local goal_sequence_pan_camera_rock_id = "goal_sequence_pan_camera_rock"
	
	local goal_rock_pan = Training_Goal(
	    Marker_GetPosition(mkr_large_rocks_obj_1b),
		{
			ID = "goal_rock_pan",
			Message = "$999455", --Move the camera over the large rocks using the LS
			DataTemplate = "GenericTrainingDataTemplate",
		},
	    RockPanCamera_CompletePredicate
	)
	
	local goal_sequence_pan_camera_rock = Training_GoalSequence(
		goal_sequence_pan_camera_rock_id,
		-1,
		1,
		PanCameraRock_Trigger,
		PanCameraRock_IgnorePredicate,
		nil,
		nil,
		false,
		{goal_rock_pan}
	)

	Training_AddGoalSequence(goal_sequence_pan_camera_rock)

	Training_EnableGoalSequenceByID(goal_sequence_pan_camera_rock_id, true)
	
end

function RockPanCamera_CompletePredicate(goal)
	
	return false
end

function PanCameraRock_Trigger(goalSequence)

	return true
end

function PanCameraRock_IgnorePredicate(goalSequence)
	
	if (Objective_IsComplete(SOBJ_MoveCameraToRocks))then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
	return false
end

-- ///// Rotate Training /////////////////////////////////////////////////////////
function Goals_RotateCamera()
	
	local goal_sequence_rotate_camera_id = "goal_sequence_rotate_camera"
	
	local goal_rotate_camera = Training_Goal(
	    Marker_GetPosition(mkr_large_rocks_obj_1b),
		{
			ID = "goal_rotate_camera",
			Message = "$999457", --Push the RS Left / Right to Rotate the Camera
			DataTemplate = "GenericTrainingDataTemplate",
		},
	    RotateCamera_CompletePredicate
	)
	
	local goal_sequence_rotate_camera = Training_GoalSequence(
		goal_sequence_rotate_camera_id,
		-1,
		1,
		RotateCamera_Trigger,
		RotateCamera_IgnorePredicate,
		nil,
		nil,
		false,
		{goal_rotate_camera}
	)

	Training_AddGoalSequence(goal_sequence_rotate_camera)

	Training_EnableGoalSequenceByID(goal_sequence_rotate_camera_id, true)
end

function RotateCamera_CompletePredicate(goal)
	
	return false
end

function RotateCamera_Trigger(goalSequence)

	return true
end

function RotateCamera_IgnorePredicate(goalSequence)
	if (Objective_IsComplete(SOBJ_RotateCamera))then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
end

-- ///// Zoom Training /////////////////////////////////////////////////////////
function Goals_ZoomCamera()
	
	local goal_sequence_zoom_camera_id = "goal_sequence_zoom_camera"
	
	local goal_zoom_camera = Training_Goal(
	    Marker_GetPosition(mkr_campfire),
		{
			ID = "goal_zoom_camera",
			Message = "$999459", --Push the RS Up and Down to Zoom In and Out
			DataTemplate = "GenericTrainingDataTemplate",
		},
	    ZoomCamera_CompletePredicate
	)
	
	local goal_sequence_zoom_camera = Training_GoalSequence(
		goal_sequence_zoom_camera_id,
		-1,
		1,
		ZoomCamera_Trigger,
		ZoomCamera_IgnorePredicate,
		nil,
		nil,
		false,
		{goal_zoom_camera}
	)

	Training_AddGoalSequence(goal_sequence_zoom_camera)

	Training_EnableGoalSequenceByID(goal_sequence_zoom_camera_id, true)
end

function ZoomCamera_CompletePredicate(goal)
	
	return false
end

function ZoomCamera_Trigger(goalSequence)

	return true
end

function ZoomCamera_IgnorePredicate(goalSequence)
	if (Objective_IsComplete(SOBJ_ZoomCamera))then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
end

-- ///// Reset Training /////////////////////////////////////////////////////////
function Goals_ResetCamera()
	
	local goal_sequence_reset_camera_id = "goal_sequence_reset_camera"
	
	local goal_reset_camera = Training_Goal(
	    Marker_GetPosition(mkr_large_rocks_obj_1b),
		{
			ID = "goal_reset_camera",
			Message = "$999461", --Press down on the Right Thumbstick to reset the Camera
			DataTemplate = "GenericTrainingDataTemplate",
		},
	    ResetCamera_CompletePredicate
	)
	
	local goal_sequence_reset_camera = Training_GoalSequence(
		goal_sequence_reset_camera_id,
		-1,
		1,
		ResetCamera_Trigger,
		ResetCamera_IgnorePredicate,
		nil,
		nil,
		true,
		{goal_reset_camera}
	)

	Training_AddGoalSequence(goal_sequence_reset_camera)

	Training_EnableGoalSequenceByID(goal_sequence_reset_camera_id, true)
end

function ResetCamera_CompletePredicate(goal)

	return false
end

function ResetCamera_Trigger(goalSequence)

	return true
end

function ResetCamera_IgnorePredicate(goalSequence)
	if (Objective_IsComplete(SOBJ_ResetCamera))then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
end

-- ///// Select William Training /////////////////////////////////////////////////////////
function Goals_SelectWilliam()

	local goal_sequence_select_william_id = "goal_sequence_select_william"
	
	local goal_select_william = Training_Goal(
	    SGroup_GetSquadAt(sg_william, 1),
		{
			ID = "goal_select_william",
			Message = "$999468", --Move the Camera to Guillaume, then Press A to Select him
			DataTemplate = "GenericTrainingDataTemplate",
		},
		SelectWilliam_CompletePredicate
	)
	
	local goal_sequence_select_william = Training_GoalSequence(
		goal_sequence_select_william_id,
		-1,
		1,
		SelectWilliam_Trigger,
		SelectWilliam_IgnorePredicate,
		nil,
		nil,
		false,
		{goal_select_william}
	)

	Training_AddGoalSequence(goal_sequence_select_william)

	Training_EnableGoalSequenceByID(goal_sequence_select_william_id, true)
end

function SelectWilliam_CompletePredicate(goal)

	return false
end

function SelectWilliam_Trigger(goalSequence)

	return true
end

function SelectWilliam_IgnorePredicate(goalSequence)
	if (Objective_IsComplete(SOBJ_SelectWilliam))then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
end

-- ///// Move William Training /////////////////////////////////////////////////////////
function Goals_MoveWilliam()
	
	local goal_sequence_move_william_id = "goal_sequence_move_william"
	
	-- this goal is very similar to the one in the sequence above, but we need this one to complete so the sequence can proceed
	local goal_select_william2 = Training_Goal(
	    SGroup_GetSquadAt(sg_william, 1),
		{
			ID = "goal_select_william2",
			Message = "$999468", --Move the Camera to Guillaume, then Press A to Select him
			DataTemplate = "GenericTrainingDataTemplate",
		},
		SelectWilliam_CompletePredicate2
	)
	
	local goal_move_william = Training_Goal(
	    "LooseReticle",
		{
			ID = "goal_move_william",
			Message = "$999470", --Move the Camera to the Marker and Press A to Move Guillaume
			DataTemplate = "GenericTrainingDataTemplate",
		},
		MoveWilliam_CompletePredicate
	)
	
	local goal_sequence_move_william = Training_GoalSequence(
		goal_sequence_move_william_id,
		-1,
		1,
		MoveWilliam_Trigger,
		MoveWilliam_IgnorePredicate,
		nil,
		nil,
		true,
		{goal_select_william2, goal_move_william}
	)

	Training_AddGoalSequence(goal_sequence_move_william)

	Training_EnableGoalSequenceByID(goal_sequence_move_william_id, true)
end

function SelectWilliam_CompletePredicate2(goal)
	return Misc_IsSGroupSelected(sg_william, ALL)
end

function MoveWilliam_CompletePredicate(goal)

	return false
end

function MoveWilliam_Trigger(goalSequence)

	return true
end

function MoveWilliam_IgnorePredicate(goalSequence)
	if Objective_IsComplete(SOBJ_MoveWilliam) then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
	
	-- If we are moving william we can ignore the hint but don't remove it until objective is complete
	if SGroup_IsMoving(sg_william, true) then
		return true
	end
end

-- ///// FOW Training /////////////////////////////////////////////////////////
function Goals_FOW()
	
	local goal_sequence_fow_id = "goal_sequence_fow"
	
	local goal_fow = Training_Goal(
	    SGroup_GetSquadAt(sg_william, 1),
		{
			ID = "goal_fow",
			Message = "$999472", --Units reveal hidden areas called Fog of War based on their Range of Sight
			DataTemplate = "GenericTrainingDataTemplate",
		},
		FOW_CompletePredicate
	)
	
	local goal_sequence_fow = Training_GoalSequence(
		goal_sequence_fow_id,
		-1,
		1,
		FOW_Trigger,
		FOW_IgnorePredicate,
		nil,
		nil,
		true,
		{goal_fow}
	)

	Training_AddGoalSequence(goal_sequence_fow)

	Training_EnableGoalSequenceByID(goal_sequence_fow)
end

function FOW_CompletePredicate(goal)
	
	return false
end

function FOW_Trigger(goalSequence)

	return true
end

function FOW_IgnorePredicate(goalSequence)
	if Prox_AreSquadsNearMarker(sg_william, mkr_follow_marker_a_obj_2c, true) then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
end