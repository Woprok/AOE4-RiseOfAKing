import("training.scar")
import("cardinal.scar")

-- ///// BuildLandmark //////////////////////////////////////////////
function Goals_BuildLandmark()

	local goal_sequence_BuildLandmark_id = "goal_sequence_BuildLandmark"

	local goal_IdleVillager = Training_Goal(
		SGroup_GetSquadAt(sg_farmVillagers, 1),
		{
			ID = "goal_IdleVillager",
			Message = "$999579", --Select a Villager and Hold Y to open the Landmark Menu
			DataTemplate = "GenericTrainingDataTemplate",
		},
		IdleVillager_CompletePredicate
	)

	local goal_LandmarkSelected = Training_Goal(
		EGroup_GetEntityAt(eg_player_tc, 1),
		{
			ID = "goal_LandmarkSelected",
			Message = "$999580", --Different Landmarks convey different bonuses to your Civilisation 
			DataTemplate = "GenericTrainingDataTemplate",
		},
		LandmarkSelected_CompletePredicate
	)

	local goal_sequence_BuildLandmark = Training_GoalSequence(
		goal_sequence_BuildLandmark_id,
		-1,
		1,
		BuildLandmark_Trigger,
		BuildLandmark_IgnorePredicate,
		nil,
		nil,
		true,
		{goal_IdleVillager, goal_LandmarkSelected}
	)

	Training_AddGoalSequence(goal_sequence_BuildLandmark)
	Training_EnableGoalSequenceByID(goal_sequence_BuildLandmark, true)
end

function IdleVillager_CompletePredicate(goal)

	return Misc_IsSGroupSelected(sg_woodVillagers, false) or Misc_IsSGroupSelected(sg_farmVillagers, false) or Misc_IsSGroupSelected(sg_goldVillagers, false)
end

function LandmarkSelected_CompletePredicate(goal)

	return false
end

function BuildLandmark_Trigger(goalSequence)

	return true
end

function BuildLandmark_IgnorePredicate(goalSequence)

	if Objective_IsComplete(SOBJ_PlaceLandmark) then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
	return false
end

-- ///// FasterLandmark //////////////////////////////////////////////
function Goals_FasterLandmark()

	local goal_sequence_FasterLandmark_id = "goal_sequence_FasterLandmark"

	local goal_StartedConstruction = Training_Goal(
		EGroup_GetEntityAt(eg_landmark, 1),
		{
			ID = "goal_StartedConstruction",
			Message = "$999581", --It will take some time for the Landmark to be built, but we can help with more Villagers 
			DataTemplate = "GenericTrainingDataTemplate",
		},
		StartedConstruction_CompletePredicate
	)

	local goal_MoreVillagers = Training_Goal(
		EGroup_GetEntityAt(eg_landmark, 1),
		{
			ID = "goal_MoreVillagers",
			Message = "$999583", --Make 3 more Villagers and assign them to Building the Landmark
			DataTemplate = "GenericTrainingDataTemplate",
		},
		MoreVillagers_CompletePredicate
	)

	local goal_AgingUp = Training_Goal(
		EGroup_GetEntityAt(eg_landmark, 1),
		{
			ID = "goal_AgingUp",
			Message = "$999585", --When a Landmark has finished construction, your civilisation advances to the next Age
			DataTemplate = "GenericTrainingDataTemplate",
		},
		AgingUp_CompletePredicate
	)

	local goal_sequence_FasterLandmark = Training_GoalSequence(
		goal_sequence_FasterLandmark_id,
		-1,
		1,
		FasterLandmark_Trigger,
		FasterLandmark_IgnorePredicate,
		nil,
		nil,
		false,
		{goal_StartedConstruction, goal_MoreVillagers, goal_AgingUp}
	)

	Training_AddGoalSequence(goal_sequence_FasterLandmark)
	Training_EnableGoalSequenceByID(goal_sequence_FasterLandmark, true)
end

function StartedConstruction_CompletePredicate(goal)

	return Timer_GetElapsed(goal.timerID) > 5
end

function MoreVillagers_CompletePredicate(goal)

	return Objective_IsComplete(SOBJ_Make3Villagers)
end

function AgingUp_CompletePredicate(goal)

	return false
end

function FasterLandmark_Trigger(goalSequence)

	return true
end

function FasterLandmark_IgnorePredicate(goalSequence)

	if Objective_IsComplete(SOBJ_WaitFinish) then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
	return false
end

-- ///// Research //////////////////////////////////////////////
function Goals_Research()

	local goal_sequence_Research_id = "goal_sequence_Research"

	local goal_NewTech = Training_Goal(
		EGroup_GetEntityAt(eg_player_tc, 1),
		{
			ID = "goal_NewTech",
			Message = "$999588", --New Technologies are now available at certain Buildings 
			DataTemplate = "GenericTrainingDataTemplate",
		},
		NewTech_CompletePredicate
	)

	local goal_ResearchBonus = Training_Goal(
		EGroup_GetEntityAt(eg_player_tc, 1),
		{
			ID = "goal_ResearchBonus",
			Message = "$999589", --Research provides bonuses and buffs to certain buildings and units 
			DataTemplate = "GenericTrainingDataTemplate",
		},
		ResearchBonus_CompletePredicate
	)

	local goal_SelectMill = Training_Goal(
		EGroup_GetEntityAt(eg_mill, 1),
		{
			ID = "goal_SelectMill",
			Message = "$999590", --Select the Mill and open the Command Menu
			DataTemplate = "GenericTrainingDataTemplate",
		},
		SelectMill_CompletePredicate
	)

	local goal_StartResearch = Training_Goal(
		EGroup_GetEntityAt(eg_mill, 1),
		{
			ID = "goal_StartResearch",
			Message = "$999591", --Use Left Stick to highlight Horticulture and confirm with A
			DataTemplate = "GenericTrainingDataTemplate",
		},
		StartResearch_CompletePredicate
	)

	local goal_sequence_Research = Training_GoalSequence(
		goal_sequence_Research_id,
		-1,
		1,
		Research_Trigger,
		Research_IgnorePredicate,
		nil,
		nil,
		false,
		{goal_NewTech, goal_ResearchBonus, goal_SelectMill, goal_StartResearch}
	)

	Training_AddGoalSequence(goal_sequence_Research)
	Training_EnableGoalSequenceByID(goal_sequence_Research, true)
end

function NewTech_CompletePredicate(goal)

	techCompleted = false
	return Timer_GetElapsed(goal.timerID) > 5
end

function ResearchBonus_CompletePredicate(goal)

	return Timer_GetElapsed(goal.timerID) > 5
end

function SelectMill_CompletePredicate(goal)

	return Misc_IsEGroupSelected(eg_mill, false)
end

function StartResearch_CompletePredicate(goal)
	
	local mill = EGroup_GetEntityAt(eg_mill, 1)
	if(Entity_GetProductionQueueSize(mill) > 0) then
		techCompleted = true
		return Entity_GetProductionQueueItem(mill, 0) == UPG.COMMON.UPGRADE_ECON_RESOURCE_FOOD_HARVEST_RATE_2
	else
		return false
	end
end

function Research_Trigger(goalSequence)

	return true
end

function Research_IgnorePredicate(goalSequence)

	if techCompleted or Objective_IsComplete(SOBJ_Horticulture) then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
	return false
end

-- ///// ResearchLumber //////////////////////////////////////////////
function Goals_ResearchLumber()

	local goal_sequence_ResearchLumber_id = "goal_sequence_ResearchLumber"

	local goal_SelectLumber = Training_Goal(
		EGroup_GetEntityAt(eg_lumber_camp, 1),
		{
			ID = "goal_SelectLumber",
			Message = LOC("Select the Lumber Mill and open the Command Menu."),
			DataTemplate = "GenericTrainingDataTemplate",
		},
		SelectLumber_CompletePredicate
	)

	local goal_StartLumberResearch = Training_Goal(
		EGroup_GetEntityAt(eg_lumber_camp, 1),
		{
			ID = "goal_StartLumberResearch",
			Message = LOC("Use Left Stick to highlight Broad Axe and confirm with."),
			DataTemplate = "GenericTrainingDataTemplate",
		},
		StartLumberResearch_CompletePredicate
	)

	local goal_sequence_ResearchLumber = Training_GoalSequence(
		goal_sequence_ResearchLumber_id,
		-1,
		1,
		ResearchLumber_Trigger,
		ResearchLumber_IgnorePredicate,
		nil,
		nil,
		false,
		{goal_SelectLumber, goal_StartLumberResearch}
	)

	Training_AddGoalSequence(goal_sequence_ResearchLumber)
	Training_EnableGoalSequenceByID(goal_sequence_ResearchLumber, true)
end

function SelectLumber_CompletePredicate(goal)

	lumberTechCompleted = false
	return Misc_IsEGroupSelected(eg_lumber_camp, false)
end

function StartLumberResearch_CompletePredicate(goal)

	local lumber = EGroup_GetEntityAt(eg_lumber_camp, 1)
	if(Entity_GetProductionQueueSize(lumber) > 0) then
		lumberTechCompleted = true
		return Entity_GetProductionQueueItem(lumber, 0) == UPG.COMMON.UPGRADE_ECON_RESOURCE_WOOD_HARVEST_RATE_2
	else
		return false
	end
end

function ResearchLumber_Trigger(goalSequence)

	return true
end

function ResearchLumber_IgnorePredicate(goalSequence)

	if lumberTechCompleted or Objective_IsComplete(SOBJ_BroadAxe) then
		Training_RemoveGoalSequence(goalSequence)
		return true
	end
	return false
end